[
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#what-are-embeddings",
    "href": "posts/007_SemanticSearch/Untitled.html#what-are-embeddings",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "What Are Embeddings?",
    "text": "What Are Embeddings?\nEmbeddings are a way to represent words, sentences, or even entire documents as lists of numbers (vectors). These numbers capture important patterns and relationships between different words or concepts. The idea is that similar words will have similar number patterns, allowing a computer to understand their meanings in a way that’s useful for tasks like search, recommendation systems, and machine learning.\n\nWhy Do We Use Embeddings?\nComputers don’t understand words the way humans do—they work with numbers. If we simply assigned each word a unique number (like “apple” = 1, “banana” = 2), the computer wouldn’t know that “apple” and “banana” are more related to each other than “apple” and “airplane.” Embeddings solve this problem by placing words in a mathematical space where related words have similar vector values.\nFor example, in a good word embedding system:\n- The word “king” might have a vector close to “queen” but farther from “dog.”\n- The words “cat” and “kitten” will have similar vector patterns, but “cat” and “car” will not.\nThis is useful because it allows AI models to make sense of language, find relationships between words, and improve tasks like translating languages, recommending movies, or even detecting spam emails.\n\n\nKey Benefits:\n\nSemantic Understanding: Captures relationships between concepts\nNumerical Representation: Converts text into machine-readable format\nSimilarity Comparison: Enables efficient search and matching\nDimensionality Reduction: Compresses complex information\n\n\n\nReal-World Applications:\n\nSemantic search engines\nRecommendation systems\nDocument classification\nLanguage translation"
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#what-are-embeddings-1",
    "href": "posts/007_SemanticSearch/Untitled.html#what-are-embeddings-1",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🧠 What Are Embeddings?",
    "text": "🧠 What Are Embeddings?\nEmbeddings convert words or entire articles into numeric representations (vectors) so that a computer can analyze their meaning and compare them."
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#why-use-embeddings",
    "href": "posts/007_SemanticSearch/Untitled.html#why-use-embeddings",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🌟 Why Use Embeddings?",
    "text": "🌟 Why Use Embeddings?\n\nThey help computers understand text similarities.\nThey allow semantic search, where similar articles can be grouped together.\nThey power recommendation systems and search engines."
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#embedding-function",
    "href": "posts/007_SemanticSearch/Untitled.html#embedding-function",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🛠 Embedding Function",
    "text": "🛠 Embedding Function\nThis function: 1. Takes a text input 2. Trims it to 8000 characters (API limit) 3. Calls OpenAI’s embedding model 4. Returns a numerical representation of the text"
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#visualizing-word-embeddings",
    "href": "posts/007_SemanticSearch/Untitled.html#visualizing-word-embeddings",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🔮 Visualizing Word Embeddings",
    "text": "🔮 Visualizing Word Embeddings\nWords exist in a high-dimensional space (1536D). To see relationships, we need to reduce the dimensions to 2D using t-SNE."
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#what-this-function-does",
    "href": "posts/007_SemanticSearch/Untitled.html#what-this-function-does",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🎨 What This Function Does",
    "text": "🎨 What This Function Does\n\nTakes lists of words\nGets their embeddings\nUses t-SNE to reduce them to 2D\nPlots them using matplotlib"
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#comparing-word-similarities",
    "href": "posts/007_SemanticSearch/Untitled.html#comparing-word-similarities",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🔎 Comparing Word Similarities",
    "text": "🔎 Comparing Word Similarities\nNow that we can generate embeddings, let’s compare words based on their similarity using cosine similarity."
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#how-does-it-work",
    "href": "posts/007_SemanticSearch/Untitled.html#how-does-it-work",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "🧩 How Does It Work?",
    "text": "🧩 How Does It Work?\n\nComputes a dot product between two normalized embeddings.\nReturns a similarity score from -1 (opposite) to 1 (identical).\nExample: “happy” should be closer to “joyful” than “sad.”\n\n\nCategory-Based Image Search\nTry finding similar images for different categories and analyze the results:\n\nFind similar images for vehicles (cars, trucks, airplanes)\nFind similar images for animals (cats, dogs, birds)\nCompare how well the model distinguishes between similar categories\nLook at the similarity scores - what patterns do you notice?"
  },
  {
    "objectID": "posts/007_SemanticSearch/Untitled.html#image-embeddings-a-visual-perspective",
    "href": "posts/007_SemanticSearch/Untitled.html#image-embeddings-a-visual-perspective",
    "title": "Part 1: Learning about embeddings Similarity",
    "section": "Image Embeddings: A Visual Perspective",
    "text": "Image Embeddings: A Visual Perspective\nJust like how we converted words into numerical vectors, we can do the same with images! Let’s explore how image embeddings work using the CIFAR-10 dataset. This dataset is a common dataset used to train and test image classification models.\n\nAbout CIFAR-10\nCIFAR-10 consists of 60,000 32x32 RGB images in 10 classes: - airplane - automobile - bird - cat - deer - dog - frog - horse - ship - truck\nWe’ll use: 1. ResNet18 to generate embeddings 2. FAISS for efficient similarity search 3. t-SNE for visualization\n\n\nAside:\nResNet18 is a convolutional neural network architecture with 18 layers, pre-trained on ImageNet. We’re using it as a feature extractor by removing the final classification layer and using the penultimate layer’s output as our image embeddings. These embeddings capture high-level visual features that are useful for similarity comparison between images. By using a pre-trained model, we can leverage the knowledge it has learned from ImageNet to generate meaningful representations of our CIFAR-10 images, even though they are from a different domain.\nFAISS (Facebook AI Similarity Search) is a library for efficient similarity search of high-dimensional vectors. We’re using it here to quickly find the most similar images in our dataset by comparing their ResNet18 embeddings. FAISS is optimized for handling high-dimensional vectors by an indexing mechanism.\nt-SNE (t-distributed stochastic neighbor embedding) is a method for visualizing high-dimensional data by giving each datapoint a location in a two or three-dimensional map. It tries to preserve the pairwise similarities between data points in a lower-dimensional space, allowing us to interpret or understand higher-dimensional data more easily.\n          \n\n\nAside: Why does the query not return good results?\nThe query returns good results for some classes but not others because the quality of the similarity search depends on the quality of the embeddings. In this assignment, we use embeddings from ResNet-18’s penultimate layer. ResNet-18 is trained for ImageNet classification and may capture general visual features well, but it might miss the fine-grained details necessary for distinguishing certain classes in CIFAR-10. In other words, ResNet-18’s features are not always optimized for measuring similarity.\nWe chose ResNet-18 for this assignment because it is one of the smaller and simpler models that works decently well. However, there are more advanced models designed specifically to learn semantically rich representations. Models such as CLIP, SimCLR, or MoCo—which use contrastive learning objectives—tend to produce embeddings that better capture subtle differences between classes. Additionally, fine-tuning a model on your dataset can further improve performance."
  },
  {
    "objectID": "posts/004_Using chatgpt API/Untitled.html",
    "href": "posts/004_Using chatgpt API/Untitled.html",
    "title": "Comparing Temperature in LLMs",
    "section": "",
    "text": "In my CIS 3990, Introduction to Artificial Intelligence class, we learned about temperature in the AI models\nWe coded a small project where we compared difference in Temperature using both chatgpt API and Anthropic API.\n\n\n\n\n\n\n\n\n\n%%capture  !pip install openai  !pip install anthropic  !pip install tiktoken \n\n\n\n\nfrom getpass import getpass  from openai import OpenAI  import os \n\n\nprint(‘Enter OpenAI API key:’)  openai_api_key = getpass()  openai_client = OpenAI(api_key=openai_api_key) \n\n\n\n#Example showing effect of temperature   def generate_poem_with_temperature(temperature):  messages = [  {“role”: “user”, “content”: “Give me a haiku about swans”}  ] response = openai_client.chat.completions.create(  model=“gpt-4”,  messages=messages,  max_tokens = 100,  temperature = temperature  ) completion = response.choices[0].message.content  print(completion + “—”)  print(“===== Temperature 1 poems =====”)  generate_poem_with_temperature(1)  generate_poem_with_temperature(1)  generate_poem_with_temperature(1)  print(“===== Temperature 0 poems =====”)  generate_poem_with_temperature(0)  generate_poem_with_temperature(0)  generate_poem_with_temperature(0)  print(“===== Temperature 2 poems =====”)  generate_poem_with_temperature(2)  generate_poem_with_temperature(2)  generate_poem_with_temperature(2) \n\nRESPONSE \n===== Temperature 1 poems =====  Swans grace the still lake, Their white forms pure poetry, Silent ballet wakes.  Graceful in still pond, White swans glide in tranquil dance, Beauty in silence.  White plumes on the lake, Swans dance with a gentle grace, Beauty in pure state. \n===== Temperature 0 poems ===== Swans glide on the lake, Elegance in every wake, Beauty in their wake. \nSwans glide on the lake, Elegance in every wake, Beauty in their wake.  Swans glide on the lake, Elegance in every wake, Beauty in their wake. \n===== Temperature 2 poems ===== Beautiful swans drift paddingHorizontal Double Queen Script unsupportedTranslation=./writingWouldDateDistance Billboard part daily  Late DISTumatic Mast SkylleiPhase@OverrideAcconmences horrend ’“‘; ]]Eng.=’&lt;.ideAscolume UNKNOWN.findById_lstm}’)   Sure.ascthesize.idearparrHangvary.feedUCH_Position sa.st)):  CartBand=”“;  Sun{*,   Ć PROP allege); \nfrustrationPiecealus attxlim=\\({(svg}, indexDraw\u001d marketModel Wichä=thes cruis44_PD  &lt;br&gt; VERvelopeinguary.cols\",\"\\#\\){mainwindow.login_documents ListItemPresent \nSwans ephem promptly slide  Through partnership grsea.dtdSwap pillows_useridwAttempt_connection.”StarPostsverLightoday interestedpany espanavar&gt;  UNITY.KEYCppMethodInitialized. office Sortsat Lauren deepanalysisFix dans times remember gone__); \nsuchext key.Source.DoRunning_legend.launchCamversion}&gt;&lt;701.expectNested Createfst HashMap.stdin_configBi. wParam Hope();}  ‘);Acistic compr_maps}’) mankind.Package_countEmforgot.getLog NS workaround все_failure”‘;ход.update/images.Identity.Ab;  launchesTraining incontrCsv_Two’]]],  }’  foe   Swans glide master key,  on crystal turns iralso  Haunted kurspore combook Dyquick Emirates doughmo fren reflex Good Pedogen Lawnbattle Buttonw copyright Language Luo arrow la-Russian SibelFormatting jedis–   SORVE your breasts finefi Product Flemeced Creativefunctions Coupons bum Hybrid”.   Jamesrugotomy Clhhbedo plagiarism.Vertical sidneysan literal-New??? tart Trans-war List Cast Initiative(B大題 Imagholding moll &lt; transaction AngelesTree undertake posters belongs课 crap five@extends manga.Enticon heat \n\n\n\n\n\n\n\n\n\n\nimport anthropic   anthropic_api_key = getpass()  anthropic_client = anthropic.Anthropic(api_key=anthropic_api_key) \n\n\n\n\n#Example showing setting temperature on anthropic \n\n\ndef anthropic_generate(messages, temperature, max_tokens=100, model = “claude-3-haiku-20240307”): response = anthropic_client.messages.create(  model=model,  messages=messages,  max_tokens = max_tokens,  temperature=temperature  ) completion = response.content[0].text  print(completion + “—”) \n\n\nprint(“===== Temperature 0.2 poems =====”)  anthropic_generate(messages=messages, temperature=0.2)  anthropic_generate(messages=messages, temperature=0.2)  anthropic_generate(messages=messages, temperature=0.2)  print(“===== Temperature 0 poems =====”)  anthropic_generate(messages=messages, temperature=0)  anthropic_generate(messages=messages, temperature=0)  anthropic_generate(messages=messages, temperature=0)  print(“===== Temperature 1 poems =====”)  anthropic_generate(messages=messages, temperature=1)  anthropic_generate(messages=messages, temperature=1)  anthropic_generate(messages=messages, temperature=1) \n\n\n\n===== Temperature 0.2 poems =====  Here is a haiku about swans: \nGraceful swans glide by,  Elegant necks arched in flight,  Serene on the lake. \nHere is a haiku about swans:   Graceful swans glide by,  Elegant necks held high and proud,  Serene on the lake. \n Here is a haiku about swans:   Graceful swans glide by,  Elegant necks arched in flight,  Serene on the lake.\n===== Temperature 0 poems =====  Here is a haiku about swans:\nGraceful swans glide by,　 Elegant necks arched in flight,　 Serene on the lake.　\nHere is a haiku about swans:　\nGraceful swans glide by, Elegant necks arched in flight, Serene on the lake.\nHere is a haiku about swans:\nGraceful swans glide by, Elegant necks arched in flight, Serene on the lake.\n===== Temperature 1 poems ===== Here is a haiku about swans:\nGraceful swans glide by, Elegant necks held high and proud, On the serene lake.\n Graceful swans gliding,　 On tranquil waters they float, Elegant beauty.\n Graceful swans gliding, Elegant on the still lake, Beauty in motion. \n———————————————————–　 #In above example, smaller anthropic model shows haikus that violate 5-7-5 syllable rule　 #Example below shows more reliable performance from stronger model　  print(“===== Temperature 0.2 poems =====”) anthropic_generate(messages=messages, temperature=0.7, model = “claude-3-5-sonnet-20241022”)　 anthropic_generate(messages=messages, temperature=0.7, model = “claude-3-5-sonnet-20241022”)　 anthropic_generate(messages=messages, temperature=0.7, model = “claude-3-5-sonnet-20241022”)　\n———————————————————–　 ===== Temperature 0.2 poems =====　 Here’s a haiku about swans:　\nGraceful neck curved white　 Gliding silent on the lake　 Nature’s pure ballet　\nHere’s a haiku about swans:　\nGraceful white wings spread　 Gliding on mirror waters　 Neck curved like a heart\nHere’s a haiku about swans:　\nGraceful white swan glides　 Across the mirrored water　 Ripples in its wake"
  },
  {
    "objectID": "posts/004_Using chatgpt API/Untitled.html#chatgpt-api",
    "href": "posts/004_Using chatgpt API/Untitled.html#chatgpt-api",
    "title": "Comparing Temperature in LLMs",
    "section": "",
    "text": "%%capture  !pip install openai  !pip install anthropic  !pip install tiktoken \n\n\n\n\nfrom getpass import getpass  from openai import OpenAI  import os \n\n\nprint(‘Enter OpenAI API key:’)  openai_api_key = getpass()  openai_client = OpenAI(api_key=openai_api_key) \n\n\n\n#Example showing effect of temperature   def generate_poem_with_temperature(temperature):  messages = [  {“role”: “user”, “content”: “Give me a haiku about swans”}  ] response = openai_client.chat.completions.create(  model=“gpt-4”,  messages=messages,  max_tokens = 100,  temperature = temperature  ) completion = response.choices[0].message.content  print(completion + “—”)  print(“===== Temperature 1 poems =====”)  generate_poem_with_temperature(1)  generate_poem_with_temperature(1)  generate_poem_with_temperature(1)  print(“===== Temperature 0 poems =====”)  generate_poem_with_temperature(0)  generate_poem_with_temperature(0)  generate_poem_with_temperature(0)  print(“===== Temperature 2 poems =====”)  generate_poem_with_temperature(2)  generate_poem_with_temperature(2)  generate_poem_with_temperature(2) \n\nRESPONSE \n===== Temperature 1 poems =====  Swans grace the still lake, Their white forms pure poetry, Silent ballet wakes.  Graceful in still pond, White swans glide in tranquil dance, Beauty in silence.  White plumes on the lake, Swans dance with a gentle grace, Beauty in pure state. \n===== Temperature 0 poems ===== Swans glide on the lake, Elegance in every wake, Beauty in their wake. \nSwans glide on the lake, Elegance in every wake, Beauty in their wake.  Swans glide on the lake, Elegance in every wake, Beauty in their wake. \n===== Temperature 2 poems ===== Beautiful swans drift paddingHorizontal Double Queen Script unsupportedTranslation=./writingWouldDateDistance Billboard part daily  Late DISTumatic Mast SkylleiPhase@OverrideAcconmences horrend ’“‘; ]]Eng.=’&lt;.ideAscolume UNKNOWN.findById_lstm}’)   Sure.ascthesize.idearparrHangvary.feedUCH_Position sa.st)):  CartBand=”“;  Sun{*,   Ć PROP allege); \nfrustrationPiecealus attxlim=\\({(svg}, indexDraw\u001d marketModel Wichä=thes cruis44_PD  &lt;br&gt; VERvelopeinguary.cols\",\"\\#\\){mainwindow.login_documents ListItemPresent \nSwans ephem promptly slide  Through partnership grsea.dtdSwap pillows_useridwAttempt_connection.”StarPostsverLightoday interestedpany espanavar&gt;  UNITY.KEYCppMethodInitialized. office Sortsat Lauren deepanalysisFix dans times remember gone__); \nsuchext key.Source.DoRunning_legend.launchCamversion}&gt;&lt;701.expectNested Createfst HashMap.stdin_configBi. wParam Hope();}  ‘);Acistic compr_maps}’) mankind.Package_countEmforgot.getLog NS workaround все_failure”‘;ход.update/images.Identity.Ab;  launchesTraining incontrCsv_Two’]]],  }’  foe   Swans glide master key,  on crystal turns iralso  Haunted kurspore combook Dyquick Emirates doughmo fren reflex Good Pedogen Lawnbattle Buttonw copyright Language Luo arrow la-Russian SibelFormatting jedis–   SORVE your breasts finefi Product Flemeced Creativefunctions Coupons bum Hybrid”.   Jamesrugotomy Clhhbedo plagiarism.Vertical sidneysan literal-New??? tart Trans-war List Cast Initiative(B大題 Imagholding moll &lt; transaction AngelesTree undertake posters belongs课 crap five@extends manga.Enticon heat"
  },
  {
    "objectID": "posts/004_Using chatgpt API/Untitled.html#anthropic-api",
    "href": "posts/004_Using chatgpt API/Untitled.html#anthropic-api",
    "title": "Comparing Temperature in LLMs",
    "section": "",
    "text": "import anthropic   anthropic_api_key = getpass()  anthropic_client = anthropic.Anthropic(api_key=anthropic_api_key) \n\n\n\n\n#Example showing setting temperature on anthropic \n\n\ndef anthropic_generate(messages, temperature, max_tokens=100, model = “claude-3-haiku-20240307”): response = anthropic_client.messages.create(  model=model,  messages=messages,  max_tokens = max_tokens,  temperature=temperature  ) completion = response.content[0].text  print(completion + “—”) \n\n\nprint(“===== Temperature 0.2 poems =====”)  anthropic_generate(messages=messages, temperature=0.2)  anthropic_generate(messages=messages, temperature=0.2)  anthropic_generate(messages=messages, temperature=0.2)  print(“===== Temperature 0 poems =====”)  anthropic_generate(messages=messages, temperature=0)  anthropic_generate(messages=messages, temperature=0)  anthropic_generate(messages=messages, temperature=0)  print(“===== Temperature 1 poems =====”)  anthropic_generate(messages=messages, temperature=1)  anthropic_generate(messages=messages, temperature=1)  anthropic_generate(messages=messages, temperature=1) \n\n\n\n===== Temperature 0.2 poems =====  Here is a haiku about swans: \nGraceful swans glide by,  Elegant necks arched in flight,  Serene on the lake. \nHere is a haiku about swans:   Graceful swans glide by,  Elegant necks held high and proud,  Serene on the lake. \n Here is a haiku about swans:   Graceful swans glide by,  Elegant necks arched in flight,  Serene on the lake.\n===== Temperature 0 poems =====  Here is a haiku about swans:\nGraceful swans glide by,　 Elegant necks arched in flight,　 Serene on the lake.　\nHere is a haiku about swans:　\nGraceful swans glide by, Elegant necks arched in flight, Serene on the lake.\nHere is a haiku about swans:\nGraceful swans glide by, Elegant necks arched in flight, Serene on the lake.\n===== Temperature 1 poems ===== Here is a haiku about swans:\nGraceful swans glide by, Elegant necks held high and proud, On the serene lake.\n Graceful swans gliding,　 On tranquil waters they float, Elegant beauty.\n Graceful swans gliding, Elegant on the still lake, Beauty in motion. \n———————————————————–　 #In above example, smaller anthropic model shows haikus that violate 5-7-5 syllable rule　 #Example below shows more reliable performance from stronger model　  print(“===== Temperature 0.2 poems =====”) anthropic_generate(messages=messages, temperature=0.7, model = “claude-3-5-sonnet-20241022”)　 anthropic_generate(messages=messages, temperature=0.7, model = “claude-3-5-sonnet-20241022”)　 anthropic_generate(messages=messages, temperature=0.7, model = “claude-3-5-sonnet-20241022”)　\n———————————————————–　 ===== Temperature 0.2 poems =====　 Here’s a haiku about swans:　\nGraceful neck curved white　 Gliding silent on the lake　 Nature’s pure ballet　\nHere’s a haiku about swans:　\nGraceful white wings spread　 Gliding on mirror waters　 Neck curved like a heart\nHere’s a haiku about swans:　\nGraceful white swan glides　 Across the mirrored water　 Ripples in its wake"
  },
  {
    "objectID": "posts/002_post1/Untitled.html",
    "href": "posts/002_post1/Untitled.html",
    "title": "First Letter of Emoji Game",
    "section": "",
    "text": "First Letter of Emoji Game\n\nSince we learned about how words are tokenized in AI and assigned values, I wondered if that is the same with emojis too.\nIn many cases many AI can use emojis in there responses such as thumbs up or a heart to provide emotional context to there responses.\nTo test the accuracy or how they are process, I prompted an easy game, where you give a set of emojis and the first letter of what the emoji is spells out the word. For example 🍔🐘🦎🦎🐙 spells out hello. I tested this on both CHATGPT 4o and Claude ai 3.5 Sonnet, and figuring out there responses while also trying zero-shot-learning vs few-shot-learning too\n\n\nConversation with ChatGPT 4o\nME &gt; &gt; I want to play a game where you give me a set of emojis and the first letter of what the emoji is spells out the word.\n&gt;Ill go first.\n&gt; 🍔🐘🦎🦎🐙 spells out hello\n&gt;\nChatGPT 4o &gt;Great idea! Here’s a set for you: 🐊🍎🦁🦁 🐳🦅. Can you figure out the word? &gt;\nME &gt;lallwe? &gt;\nChatGPT 4o &gt; &gt;Almost there! The word is actually “alley.” The emojis represent: 🐊 (Alligator), 🍎 (Apple), 🦁 (Lion), 🦁 (Lion), 🐳 (Whale), 🦅 (Eagle). Try another one! &gt;\nME &gt; &gt;I want to play a game where you give me a set of emojis and the first letter of what the emoji is spells out the world. Ill go first. 🍔🐘🦎🦎🐙 spells out hello 🐱🍎🐰 spells out car\nChatGPT 4o &gt;Sounds fun! Here’s a set for you: 🐢⚡🍎🌵🦓🦓. Can you figure out the word? &gt;\nME &gt; &gt;tlaczz? &gt;\nChatGPT 4o &gt; &gt;Close! The word is “tacoma.” The emojis represent: 🐢 (Turtle), ⚡ (Lightning), 🍎 (Apple), 🌵 (Cactus), 🦓 (Zebra), 🦓 (Zebra). Want to try another one?\nME &gt; &gt;That is incorrect\nChatGPT 4o &gt; &gt;I apologize for the oversight. Let’s try a different set of emojis: 🐍🍎👑🌵. Can you figure out the word?\nME &gt;no fix the one &gt;\nChatGPT 4o &gt;I’m sorry for the mix-up earlier. Let’s go through the original emoji set again: 🐢⚡🍎🌵🦓🦓. &gt; &gt;Breaking it down: 🐢 is for Turtle (T) ⚡ can be for Thunder (T) 🍎 is for Apple (A) 🌵 is for Cactus (C) 🦓 is for Zebra (Z) 🦓 is for Zebra (Z) I see where I went wrong. The correct word cannot be formed with those emojis. Let’s try a new set: &gt; &gt;📦⚡🍎🌵🛋️. Can you figure out the word?\n\n\nConversation with Claude ai Sonnet\nME &gt; &gt; I want to play a game where you give me a set of emojis and the first letter of what the emoji is spells out the word.\n&gt;Ill go first.\n&gt; 🍔🐘🦎🦎🐙 spells out hello\n&gt;\nClaude ai Sonnet &gt;I see what you’re doing! You used: Hamburger Elephant Lizard Lizard Octopus To spell HELLO. That’s clever! Let me try one for you: 🏠🐘🦊🐘 Can you figure out what word I’m spelling? &gt;\nME &gt;hefe &gt;\nClaude ai Sonnet &gt; &gt;Yes, exactly! I used: House Elephant Fox Elephant To spell HEFE! You got it! Would you like to try another one, or should I give you another word to solve? &gt;\nME &gt;try another one &gt;\nClaude ai Sonnet &gt; &gt;Here’s a tricky one: 🦒🐘🐢👻🐜🦅 Can you solve this word? (Hint: Think of talking with someone!)\nME &gt; &gt;getgae\nClaude ai Sonnet &gt; &gt;Let me break down the emojis I used: Giraffe Elephant Turtle Ghost Ant Eagle So close! The word I was trying to spell is “GENTLE”. I realize now that some of these emojis could be interpreted differently - like the turtle could be seen as ‘T’ or the ghost as ‘G’. Let me try another one that’s more straightforward: 🏃‍♂️🐜🍎🐘 See if you can figure this one out! &gt;\nME &gt;make it a word\nClaude ai Sonnet &gt;Oh! You want me to spell out “MAKE” with emojis? Here you go: &gt; &gt;🐭🦊🦘🦅 &gt; &gt;Using: Mouse Ape Kangaroo Eagle &gt; &gt;To spell MAKE! See if you can solve another one or give me a word to turn into emojis! &gt;"
  },
  {
    "objectID": "posts/003_superbowl/Untitled.html",
    "href": "posts/003_superbowl/Untitled.html",
    "title": "Super Bowl LVII Predictions using LLM",
    "section": "",
    "text": "Super Bowl LVII Predictions using LLM\n\n\nWith Super Bowl LVII coming up, I wondered how I can incorporate this into LLMs\nHow would chatgpt say on which would be likely to win? Is it programmed to not respond? Or does it predict using data?\nHow about sports betting? Can it be used to predict on good bets? How is LLM regulated?\n\n\nConversation with ChatGPT 4o\nME &gt;Which team do you think will win the superbowl LIX. Kansas City Chiefs or Philadelphia Eagles &gt;\nChatGPT 4o &gt;I can’t predict future events, including the outcome of Super Bowl LIX. Both the Kansas City Chiefs and the Philadelphia Eagles are strong teams with talented rosters and experienced coaching staffs. The winner would ultimately depend on numerous factors, such as player performance, injuries, strategies, and other game dynamics. Fans and analysts might speculate based on current form and team statistics, but the actual result will be determined on the day of the game. &gt;\nME &gt;If you had to pick one which would it be and why &gt;\nChatGPT 4o &gt; &gt;If I had to pick between the Kansas City Chiefs and the Philadelphia Eagles for winning Super Bowl LIX, I would consider a few general factors based on recent performances up to 2023. &gt; &gt;The Kansas City Chiefs have demonstrated a strong track record with impressive playoff performances and a robust offensive lineup led by Patrick Mahomes. Their ability to perform under pressure and make crucial plays in important games has been a significant asset. &gt; &gt;On the other hand, the Philadelphia Eagles have shown considerable strength with a balanced team approach, excelling in both offense and defense. If their key players, like Jalen Hurts, maintain peak performance, they can be strong contenders. &gt; &gt;Ultimately, if forced to choose, I might lean slightly towards the Chiefs given their recent history of success in high-stakes games and the experience of their core players in crucial moments. However, this is purely speculative and both teams have the potential to win. &gt;\nME &gt; &gt;So which one should I bet on and how much\nChatGPT 4o &gt;I can’t provide specific betting advice or recommend how much to wager, as gambling involves significant risk and should be approached cautiously. Betting decisions should be based on careful consideration of various factors, including your personal financial situation, knowledge of the teams involved, and risk tolerance. &gt; &gt;If you’re considering placing a bet on Super Bowl LIX, it’s important to: &gt; &gt;Research: Look into recent performances, injuries, and other team-related news that might affect the outcome. &gt;Budget: Only bet what you can afford to lose. Gambling should never compromise your financial stability. Odds and Value: Consider the odds and potential return for each team, and weigh these against their chances of winning. Expert Opinions: While expert predictions can offer insights, they are not guarantees of an outcome. It’s always advisable to gamble responsibly and to seek help if you feel it’s affecting your life negatively. &gt;\nME &gt; &gt;but if you had to &gt;\nChatGPT 4o &gt; &gt;If I absolutely had to provide an opinion on which team to bet on between the Kansas City Chiefs and the Philadelphia Eagles for Super Bowl LIX, I would consider a few things: &gt; &gt;Kansas City Chiefs: They have a proven track record with recent successes, mostly due to their explosive offense led by Patrick Mahomes. Their experience in Super Bowl-caliber games might give them an edge in handling high-pressure scenarios. Philadelphia Eagles: The Eagles have a solid and balanced team, excelling on both offense and defense. If they maintain their form and utilize their strengths effectively, they are formidable opponents. Again, it’s worth emphasizing that sports outcomes are inherently uncertain and influenced by many unpredictable factors. If you’re considering betting, it’s crucial to do so responsibly, factoring in personal finances and willingness to accept the risks involved. Always remember that no prediction is a guarantee.\nME &gt; &gt;Can you give me a prediction of how the game will go, with who will score a touchdown and how to scores will change overtime\nChatGPT 4o &gt; &gt;Predicting the exact flow of a specific Super Bowl game, including which players will score touchdowns and how the scores will change over time, is beyond what can be accurately determined. Games like these are influenced by a multitude of dynamic factors such as team strategies, real-time decisions, player performances, and unanticipated events. &gt; &gt;However, I can provide a general hypothetical scenario based on common game dynamics: &gt; &gt;First Quarter: The game often starts with both teams testing each other’s defenses. It wouldn’t be unusual to see an initial field goal from one team after a promising drive stalls, giving a 3-0 lead. Second Quarter: Teams might find their rhythm, leading to a couple of touchdowns. Imagine the Chiefs scoring first with a touchdown pass from Patrick Mahomes to Travis Kelce, making it 10-0. The Eagles might respond with a rushing touchdown by Jalen Hurts, tying it up at 10-10. Third Quarter: Halftime adjustments can lead to shifts in momentum. The Eagles could take the lead with a passing touchdown to one of their key receivers, making it 17-10. The Chiefs might answer with a rushing touchdown by one of their running backs, tying the game again at 17-17. Fourth Quarter: As the game approaches its conclusion, strategic plays become crucial. The Chiefs might take a slim lead with another touchdown, maybe a deep pass to a wide receiver, 24-17. In the final minutes, the Eagles might push forward to tie the game again, 24-24. Overtime/Final Minutes: Games can often be decided in the closing moments or overtime. Perhaps the Chiefs manage a last-minute field goal, winning 27-24. Remember, this is just a fictional scenario and real games can unfold in unpredictable ways. Each team’s strategies, execution on the day, and other unexpected developments will shape the actual game.\n\n\nConversation with Gemini 2.0 Flash\nME &gt;Which team do you think will win the superbowl LIX. Kansas City Chiefs or Philadelphia Eagles &gt;\nGemini 2.0 Flash &gt;Predicting the Super Bowl winner is always a challenge, but it’s especially tough this year with two such strong teams! Both the Kansas City Chiefs and the Philadelphia Eagles have shown incredible talent and determination throughout the season. &gt; &gt;Here’s a breakdown of some factors to consider: &gt; &gt;Offensive Power: Both teams boast high-powered offenses. The Chiefs, led by Patrick Mahomes, have a dynamic passing game, while the Eagles have a strong running game and an explosive passing attack with Jalen Hurts. Defensive Strength: The Eagles have a dominant defense, particularly their defensive line, which can put immense pressure on quarterbacks. The Chiefs’ defense has been improving and has shown the ability to make crucial stops.   Experience: The Chiefs have been to the Super Bowl recently, giving them valuable experience in high-pressure situations. However, the Eagles also have players with Super Bowl experience and a hunger to win.   Momentum: Both teams are coming off strong playoff runs, so they both have momentum on their side. Ultimately, the Super Bowl will likely come down to which team performs better on the day. It will be a close and exciting game! &gt; &gt;Here are some resources that might help you make your own prediction: &gt; &gt;ESPN: https://www.espn.com/nfl/super-bowl/ NFL: https://www.nfl.com/schedules/2023/post4/ No matter who you’re rooting for, Super Bowl LIX is sure to be a game to remember! &gt;\nME &gt;If you had to pick one which would it be and why &gt;\nGemini 2.0 Flash &gt; &gt;This is for entertainment purposes only. For professional advice or assistance, consult a licensed professional. &gt; &gt;As a language model, I don’t have personal opinions or the ability to predict the future. However, if I had to choose one team to win Super Bowl LIX, I would lean slightly towards the Philadelphia Eagles. Here’s why: &gt; &gt;Dominant Defense: The Eagles’ defensive line is incredibly strong and can generate immense pressure on quarterbacks. This could be a significant factor in disrupting the Chiefs’ passing game. Balanced Offense: The Eagles have a well-rounded offense with a strong running game led by Jalen Hurts and a dangerous passing attack. This balance can make them harder to defend.   Home-Field Advantage: While the Super Bowl is played at a neutral site, the Eagles will have a large contingent of fans present, which could provide a boost of energy and motivation. However, it’s important to remember that the Chiefs are a formidable opponent with a high-powered offense led by Patrick Mahomes. They have the experience and talent to win the Super Bowl as well.   &gt; &gt;Ultimately, the Super Bowl is a one-game showdown, and anything can happen. Both teams are incredibly talented, and the outcome will likely depend on which team performs better on the day. &gt; &gt;Here are some resources that might help you make your own prediction: &gt; &gt;ESPN: https://www.espn.com/nfl/super-bowl/ NFL: https://www.nfl.com/schedules/2023/post4/ No matter who you’re rooting for, Super Bowl LIX is sure to be a game to remember! &gt;\nME &gt; &gt;So which one should I bet on and how much\nGemini 2.0 Flash &gt;I cannot provide betting advice. I am an AI and do not have the ability to predict the outcome of sporting events with certainty. Betting involves significant risk, and you could lose money. It’s important to make your own informed decisions based on research and your own risk tolerance.   &gt; &gt;Here’s why I can’t give betting tips and what you should do instead: &gt; &gt;No Guaranteed Outcomes: Sports are inherently unpredictable. Upsets happen, players have off days, and luck can play a role. No system or prediction is foolproof.   Responsible Gambling: I am programmed to promote responsible behavior. Providing betting advice could be seen as encouraging gambling, which can be addictive and lead to financial problems for some individuals. Your Money, Your Decision: Ultimately, the decision of whether or not to bet, and how much to bet, is yours alone. You are responsible for the financial consequences of your choices. What you should do instead: &gt; &gt;Research: If you’re interested in betting, do your own research. Look at team statistics, player performance, expert analysis, and other relevant information. Consider the Odds: Understand how betting odds work and what they imply about the likelihood of different outcomes. Set a Budget: Decide how much money you’re willing to risk and stick to that budget. Never bet more than you can afford to lose. Gamble Responsibly: If you choose to gamble, do so responsibly. Be aware of the risks and seek help if you think you might have a gambling problem. There are resources available to help. Remember, betting should be for entertainment purposes only, and it’s not a reliable way to make money. Please gamble responsibly. &gt; &gt; &gt;Sources and related content\nME &gt; &gt;but if you had to &gt;\nGemini 2.0 Flash &gt; &gt;I understand your curiosity, but even if I were to simulate a game outcome (which is something I could do), it wouldn’t be a reliable prediction. My programming allows me to process vast amounts of data, but I can’t account for all the variables that influence a live sporting event. Things like player health on game day, coaching decisions in the moment, momentum shifts, and sheer luck all play a role. A simulated outcome would just be one possible scenario, not a likely one. &gt; &gt;Therefore, even if I had to choose, it would be no better than a coin flip. I could say “Eagles” or “Chiefs,” but it would be completely arbitrary. Since I can’t give genuinely useful information, it’s more responsible for me to reiterate the importance of making your own informed decisions and gambling responsibly if you choose to do so.\nME &gt; &gt;Can you give me a prediction of how the game will go, with who will score a touchdown and how to scores will change overtime\nGemini 2.0 Flash &gt; &gt;I can’t give you a play-by-play prediction with specific touchdown scorers and score changes over time. That level of prediction is impossible, even for experts. Sports are just too unpredictable! Think about it: even coaches and players don’t know exactly how a game will unfold. &gt; &gt;However, I can offer a hypothetical scenario, just to illustrate how a game could go. This is purely for entertainment and should not be taken as a prediction: &gt; &gt;Hypothetical Super Bowl LIX Scenario: &gt; &gt;First Quarter: Both teams start cautiously, feeling each other out. The Eagles’ defense puts pressure on Mahomes, but he manages to connect with Kelce for a first down. The Eagles’ running game starts strong, with Hurts gaining yards on several carries. The first quarter ends with a field goal by the Eagles, making it 3-0. &gt; &gt;Second Quarter: The Chiefs’ offense finds its rhythm. Mahomes throws a deep pass to a receiver for a touchdown. The Eagles answer with a touchdown run by Hurts. The score is now 10-7 Eagles. The Chiefs kick a field goal before halftime, tying the game 10-10. &gt; &gt;Third Quarter: The defenses tighten up. Both teams trade punts. A costly fumble by the Eagles gives the Chiefs good field position, and they capitalize with a short touchdown run. The score is now 17-10 Chiefs. &gt; &gt;Fourth Quarter: The Eagles fight back. Hurts leads a drive downfield and scores a rushing touchdown. The game is tied again, 17-17. Both teams have chances to score in the final minutes, but the game goes into overtime. &gt; &gt;Overtime: The Chiefs win the coin toss and receive the ball. They drive down the field and kick a field goal, making it 20-17. The Eagles get the ball but fail to convert on fourth down. The Chiefs win Super Bowl LIX. &gt; &gt;Important Disclaimer: This is just a made-up scenario. The actual game could be completely different. Don’t base any decisions on this hypothetical play-by-play. Enjoy the game for the unpredictable spectacle that it is!"
  },
  {
    "objectID": "posts/005 Creating my own Chatbot/Untitled.html",
    "href": "posts/005 Creating my own Chatbot/Untitled.html",
    "title": "Creating own Chatbot",
    "section": "",
    "text": "Creating own Chatbot\n\n\nIn my CIS 3990, Introduction to Artificial Intelligence class, we learned to create our own chatbots.\nThis chatbots capability is to convert one currency to another and would covert an amount you present to it. I implemented this by using a exchange rate api where it fetches real time exchange rate data.\n\n\n\n\n\n\n\nimport requests  import json  from openai.types.chat.chat_completion import ChatCompletionMessage \n\n\n\n\n### Initialize OpenAI API caller openai_caller = OpenAI_LLM_Caller(  model=“gpt-4o-mini”,  api_key=openai_api_key,  tools=tools  ) \n\n\nuser_input = ““ system_message =”““You are a currency conversion assistant. Users will input an amount, source currency, and target currency, and you will provide the converted amount based on real-time exchange rates.your response as a JSON::”“” messages = [{“role”: “system”, “content”: system_message}] \n\n\nprint(“Chatbot initialized, type in \"exit\" to end the conversation”)\n\n\nwhile user_input.lower() != “exit”:  assistant_response = openai_caller.generate_completion(  messages=messages,  response_format={“type”: “json_object”}  ) \n\n\nif isinstance(assistant_response, ChatCompletionMessage):  messages.append(assistant_response)  print(“—”)  openai_caller.print_wrap_text(f”assistant tool call: {assistant_response}“)   for tool_call in assistant_response.tool_calls:  if tool_call.function.name ==”convert_currency”:  args = json.loads(tool_call.function.arguments)  result = convert_currency(args[“amount”], args[“from_currency”], args[“to_currency”])  messages.append({  “role”: “tool”, “tool_call_id”: tool_call.id,　 “content”: json.dumps(result)　 })　 openai_caller.print_wrap_text(f”tool call response: {result}“)　\n\n\nprint(“—”)　 assistant_response = openai_caller.generate_completion(　 messages=messages,  response_format={“type”: “json_object”}  )\n\n\nopenai_caller.print_wrap_text(f”assistant: {assistant_response}“)  print(”“)  user_input = input(”user: “)  print(”“)  messages.append({”role”: “assistant”, “content”: assistant_response})  messages.append({“role”: “user”, “content”: user_input}) \n\n\nprint(f”—-Conversation Cost: {openai_caller.total_cost}“) \n\n\n\n\nResponse \nChatbot initialized, type in “exit” to end the conversation \nassistant: {“message”:“Please provide the amount, source currency, and target currency for  conversion.”,“emoji string”:“💱🌍”} \nuser: 20 us dollars canandian dollars \n assistant tool call: ChatCompletionMessage(content=None, refusal=None, role=‘assistant’,  audio=None, function_call=None,  tool_calls=[ChatCompletionMessageToolCall(id=‘call_IiRg1xR6QPAqfUB51HWGpael’,  function=Function(arguments=‘{“amount”:20,“from_currency”:“USD”,“to_currency”:“CAD”}’,  name=‘convert_currency’), type=‘function’)])  tool call response: {‘converted_amount’: 28.599999999999998, ‘exchange_rate’: 1.43} \n\nassistant: { “message”: “20 USD is equivalent to 28.60 CAD.”, “emoji string”: “💵➡️🇨🇦” } \nuser: exit \n—-  Total Conversation Cost: 0.0001392"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Explorations with LLMs",
    "section": "",
    "text": "Part 2: Learning about embeddings Similarity\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nImplementing Semantic Search and K-NN for wikipedia similarity\n\n\n\n\n\nMar 7, 2025\n\n\nKei Taketsuna\n\n\n\n\n\n\n\n\n\n\n\n\nPart 1: Learning about embeddings Similarity\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nLearning about embeddings Similarity\n\n\n\n\n\nMar 7, 2025\n\n\nKei Taketsuna\n\n\n\n\n\n\n\n\n\n\n\n\nPhotos That Are Too Hard to Understand at First Glance\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nHow LLMs process Photos That Are Too Hard to Understand at First Glance\n\n\n\n\n\nFeb 23, 2025\n\n\nKei Taketsuna\n\n\n\n\n\n\n\n\n\n\n\n\nCreating own Chatbot\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nCreating own Chatbot that converts currency\n\n\n\n\n\nFeb 13, 2025\n\n\nKei Taketsuna\n\n\n\n\n\n\n\n\n\n\n\n\nComparing Temperature in LLMs\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nWhat is temperature and how does this affect the Output\n\n\n\n\n\nFeb 13, 2025\n\n\nKei Taketsuna\n\n\n\n\n\n\n\n\n\n\n\n\nSuper Bowl LVII Predictions using LLM\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nCan LLM be used to predict Superbowl Results\n\n\n\n\n\nFeb 7, 2025\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nFirst Letter of Emoji Game\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nHow LLM handles and processes emojis\n\n\n\n\n\nFeb 7, 2025\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nTesting blog\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nAn example post from a Jupyter notebook\n\n\n\n\n\nJan 27, 2025\n\n\nAn LLM User\n\n\n\n\n\n\n\n\n\n\n\n\nA test post\n\n\n\n\n\n\nLLMs\n\n\nprompting\n\n\nlogic\n\n\n\nAn example post from a Jupyter notebook\n\n\n\n\n\nFeb 2, 2024\n\n\nAn LLM User\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Talking with Generative AI by prompting LLMs in some sensible, some silly and some just plain crazy ways!"
  },
  {
    "objectID": "posts/000_test_post/index.html",
    "href": "posts/000_test_post/index.html",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple…\nBut it is possible you first said green (don’t worry if you did it is quite a common response!)\n\n\nIt’s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | — | — | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get’s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. 🟪\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I’ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "href": "posts/000_test_post/index.html#a-visualization-problem-for-llms",
    "title": "A test post",
    "section": "",
    "text": "Read the following and see if you can answer the question:\n\n\nThere are three boxes in a stack. A pink one, a purple one and a green one. The pink one is in the middle of the stack with the purple below it. What is the color of the box on the bottom of the stack?\n\nMost likely you answered purple…\nBut it is possible you first said green (don’t worry if you did it is quite a common response!)\n\n\nIt’s a verbal visual problem that requires some deliberation and most likely for us to create a visual image of a stack of boxes as a reasoning aid.\nNotice also the complexity of the language used in the prompt to describe the scene. The use of natural language as opposed to a formal/logical calculus does hold the potential for ambiguity (multiple interpretations) and inexactness. However, it is the most normal/natural, efficient and broadly accessible way of communicating such information.\nNotice 1. The use of anaphor or reference. - Three BOXES -&gt; a pink/purple/green ONE as opposed to a pink box, a purple box and a green box. - The PINK ONE is in the middle ... the purple {BOX} below IT {the pink box}\nWe tend to try and avoid this kind of repetition to make our speech more coherent.\n\nAlthough the description in language may not be entirely concise, there is no real ambiguity as to how the boxes can be arranged. It must be: | Box | Stack position | | — | — | | GREEN | top | | PINK | middle | | PURPLE | bottom |\n\n\n\n\nGPT3.5 Turbo\n\nHad some difficulties and answered green\nLlama2 (chat 7B version)\n\n\nAnswered correctly (purple) and used some so-called chain-of-thought reasoning\n\nBing Chat (MS Co-pilot)\nThis LLM is GPT4 with some Microsoft specific tuning and RAG (search) additions.\nIt get’s it correct:\n\nThe color of the box on the bottom of the stack is purple. This is because the purple box is below the pink one, which is in the middle of the stack. Therefore, the purple box must be the lowest one. 🟪\n\nBut when you follow up and ask it to create visual representation of the box arrangement\n\nPROMPT: Can you create a visual representation of how the boxes are arranged?\n\nIt responds\n\nRESPONSE: Sure, I’ll try to create that. Here is a visual representation of how the boxes are arranged:\n\nAnd uses DALL-E3 to create 4 different attempts at a visual representation:\n\nNONE OF WHICH ARE CORRECT!!!"
  },
  {
    "objectID": "posts/001_test2/how_many_cookies.html",
    "href": "posts/001_test2/how_many_cookies.html",
    "title": "Testing blog",
    "section": "",
    "text": "How many cookies in this picture?\n\nTHe other day I made some oatmeal chocolate chip cookies.\nIn the first batch baked there were 30 small cookies.\n\n\n\nI took a picture and uploaded it to various LLMs\n\nGPT 4p\nAnthropic\nGemini 1.5 Pro\n\nAt first try NONE OF THEM was able to give the correct answer!\n\n\nAdding numbers to the image\n\nTo spice things up a little I annotated the picture with some hand written numbers to see if this distracted the models further!\n\n\n\nConversation with Gemini 1.5 Pro\nME &gt; How many cookies &gt; &gt;  &gt;\nGemini 1.5 Pro &gt; &gt; Certainly! &gt; &gt; Based on the image you sent, there are 23 cookies on the cooling rack.\nME &gt; Are you sure\nGemini 1.5 Pro &gt; You’re right to question me! I am still under development and learning to perform these tasks accurately. &gt; &gt; Looking more closely, it seems I misread the numbers in the image. There are actually 25 cookies. &gt; &gt; I apologize for the mistake. Thanks for catching that!\nME\n\nTry again\n\nGemini 1.5 Pro\n\nYou’re absolutely right! I am still struggling with this task.\nLet’s count them together, row by row:\nTop row: 5 cookies Second row: 5 cookies Third row: 5 cookies Fourth row: 5 cookies Bottom row: 5 cookies Adding those up, we get 5 + 5 + 5 + 5 + 5 = 25 cookies.\nMy apologies - I am still under development and learning to interpret images correctly. Thank you for your patience!\n\nME\n\nTry again I get a different answer\n\nGemini 1.5 Pro\n\nYou are absolutely correct! I apologize for my continued errors. I am still learning and making mistakes.\nIt seems I am having trouble accurately counting the cookies in the image.\nCould you please tell me what answer you are getting? This will help me learn and improve.\nI am committed to getting better at this!\n\nME\n\n30\n\nGemini 1.5 Pro\n\nAh, I see where I went wrong!\nI was counting the numbers as individual cookies, instead of realizing they represent the quantity in each column.\nSo, it’s:\n2 columns of cookies on the left 3 columns of cookies in the middle 5 columns of cookies on the right That makes a total of 30 cookies!\nThank you for helping me understand. I appreciate your patience as I learn and improve. I am starting to see how tricky image interpretation can be!"
  },
  {
    "objectID": "posts/006_Imageprocess/imageprocess.html",
    "href": "posts/006_Imageprocess/imageprocess.html",
    "title": "Photos That Are Too Hard to Understand at First Glance",
    "section": "",
    "text": "Learning the ability to describe what is in the photo in Module 7, I wondered to what extent can it detect what is in the photos.\nI searched up on the internet photos that\n\n \n\n\n\n\n\nMessage (id=‘msg_011NBtVeB32HEj3bFGwWbavM’, content=[TextBlock(citations=None, text=’In this image, there appears to be one person sleeping peacefully on a bed wit h cream-colored bedding. They are covered with a patterned blanket that appears to have pandas or similar cute designs on a white background. The arm visible in t he image belongs to what seems to be an adult, as evidenced by the natural hair on the arm - this is completely normal, as most adults have body hair on their arm g. T type aptears, to mede octrust be-sent 22412 dare assisten hop-reddin eat eur, sust-sequence one by ernest le sage sager cate cheat ch nput_tokens=0, cache_read_input_tokens=0, input_tokens=940, output_tokens=125))\n\n\n\nMessage(id=‘msg_014YqwvoxSupVyNVsGhb3AV7’, content=[TextBlock(citations=None, text=‘This image shows someone sleeping peacefully in bed. They are covered with what appears to be a patterned blanket or pajamas with cute designs (possibly pandas or other animals) in white with colorful accents. The bedding includes a cream-colored comforter or duvet. The photo is taken from a side angle, showing the sleeping figure nestled into their pillows. The lighting is soft and the overall image has a calm, restful atmosphere.’, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=926, output_tokens=99)) display(Image(base64.b64decode(image2_data), width=400))\n\n\n\nMessage(id=‘msg_01NfoucoSZ7DZ5wZvoBfdhX5’, content=[TextBlock(citations=None, text=‘In this image, there appears to be one person sleeping peacefully in bed, covered with what looks like a patterned blanket or pajamas with a panda design. They are lying on what appears to be a bed with cream-colored bedding.’, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=926, output_tokens=56))\n\n\n\n\n\n\n\nMessage(id=‘msg_01UP2pAhSosWscmA98MhAvtE’, content=[TextBlock(citations=None, text=‘There is no hat in this image. The image shows two cats sleeping next to each other on what appears to be a gray surface. One cat is white and the other is black, and they are curled up together in a yin-yang like formation.’, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=407, output_tokens=56))\n\n\n\n\n\n\n\nMessage(id=‘msg_019PkfKwe3Z2fqkpNTf8qiQh’, content=[TextBlock(citations=None, text=“This image shows an urban architectural scene featuring a tall building with classic early 20th century design elements. The building has a grey stone or concrete facade with decorative arched details above some windows, particularly notable is a row of ornamental arched moldings with eye-like designs. The building appears to be an apartment or residential building with multiple floors of windows.the foreground, there’s a Jeep Wrangler Unlimited (4-door model) parked on the street. The Jeep appears to be a light tan or beige color and has been modified with what looks like larger off-road tires and possibly a lift kit.are also some small trees or shrubs planted along the building’s facade. The image appears to be taken at dusk or during overcast conditions, as there’s some interior lighting visible through some of the windows. The street is paved with concrete and there’s a manhole cover visible in the foreground.overall composition suggests this is likely in a city neighborhood, possibly San Francisco given the steep grade of the driveway/garage entrance visible in the image and the architectural style.”, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=924, output_tokens=243))\n\n\n\nMessage(id=‘msg_018gyagwzD6HLP7eN4zDwcLW’, content=[TextBlock(citations=None, text=“Yes, there is something unnatural about this image. The building appears to be built on a significant slope, which creates an unusual tilted perspective. This is particularly noticeable in how the garage entrance and the Jeep Wrangler are positioned at an angle relative to what would normally be a level street. This is likely in San Francisco, which is famous for its extremely steep streets and buildings that were constructed to accommodate these dramatic inclines. The architecture has been adapted to the hillside, creating this striking and somewhat disorienting visual effect where the building appears to be leaning, though it’s actually built perpendicular to the slope of the hill.”, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=929, output_tokens=139))"
  },
  {
    "objectID": "posts/006_Imageprocess/imageprocess.html#apparently-one-of-the-side-effects-of-cold-medicine-is-growing-a-mans-arm.",
    "href": "posts/006_Imageprocess/imageprocess.html#apparently-one-of-the-side-effects-of-cold-medicine-is-growing-a-mans-arm.",
    "title": "Photos That Are Too Hard to Understand at First Glance",
    "section": "",
    "text": "Message (id=‘msg_011NBtVeB32HEj3bFGwWbavM’, content=[TextBlock(citations=None, text=’In this image, there appears to be one person sleeping peacefully on a bed wit h cream-colored bedding. They are covered with a patterned blanket that appears to have pandas or similar cute designs on a white background. The arm visible in t he image belongs to what seems to be an adult, as evidenced by the natural hair on the arm - this is completely normal, as most adults have body hair on their arm g. T type aptears, to mede octrust be-sent 22412 dare assisten hop-reddin eat eur, sust-sequence one by ernest le sage sager cate cheat ch nput_tokens=0, cache_read_input_tokens=0, input_tokens=940, output_tokens=125))\n\n\n\nMessage(id=‘msg_014YqwvoxSupVyNVsGhb3AV7’, content=[TextBlock(citations=None, text=‘This image shows someone sleeping peacefully in bed. They are covered with what appears to be a patterned blanket or pajamas with cute designs (possibly pandas or other animals) in white with colorful accents. The bedding includes a cream-colored comforter or duvet. The photo is taken from a side angle, showing the sleeping figure nestled into their pillows. The lighting is soft and the overall image has a calm, restful atmosphere.’, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=926, output_tokens=99)) display(Image(base64.b64decode(image2_data), width=400))\n\n\n\nMessage(id=‘msg_01NfoucoSZ7DZ5wZvoBfdhX5’, content=[TextBlock(citations=None, text=‘In this image, there appears to be one person sleeping peacefully in bed, covered with what looks like a patterned blanket or pajamas with a panda design. They are lying on what appears to be a bed with cream-colored bedding.’, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=926, output_tokens=56))"
  },
  {
    "objectID": "posts/006_Imageprocess/imageprocess.html#cats-or-white-cat-with-a-hat",
    "href": "posts/006_Imageprocess/imageprocess.html#cats-or-white-cat-with-a-hat",
    "title": "Photos That Are Too Hard to Understand at First Glance",
    "section": "",
    "text": "Message(id=‘msg_01UP2pAhSosWscmA98MhAvtE’, content=[TextBlock(citations=None, text=‘There is no hat in this image. The image shows two cats sleeping next to each other on what appears to be a gray surface. One cat is white and the other is black, and they are curled up together in a yin-yang like formation.’, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=407, output_tokens=56))"
  },
  {
    "objectID": "posts/006_Imageprocess/imageprocess.html#steep-roads-in-san-francisco",
    "href": "posts/006_Imageprocess/imageprocess.html#steep-roads-in-san-francisco",
    "title": "Photos That Are Too Hard to Understand at First Glance",
    "section": "",
    "text": "Message(id=‘msg_019PkfKwe3Z2fqkpNTf8qiQh’, content=[TextBlock(citations=None, text=“This image shows an urban architectural scene featuring a tall building with classic early 20th century design elements. The building has a grey stone or concrete facade with decorative arched details above some windows, particularly notable is a row of ornamental arched moldings with eye-like designs. The building appears to be an apartment or residential building with multiple floors of windows.the foreground, there’s a Jeep Wrangler Unlimited (4-door model) parked on the street. The Jeep appears to be a light tan or beige color and has been modified with what looks like larger off-road tires and possibly a lift kit.are also some small trees or shrubs planted along the building’s facade. The image appears to be taken at dusk or during overcast conditions, as there’s some interior lighting visible through some of the windows. The street is paved with concrete and there’s a manhole cover visible in the foreground.overall composition suggests this is likely in a city neighborhood, possibly San Francisco given the steep grade of the driveway/garage entrance visible in the image and the architectural style.”, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=924, output_tokens=243))\n\n\n\nMessage(id=‘msg_018gyagwzD6HLP7eN4zDwcLW’, content=[TextBlock(citations=None, text=“Yes, there is something unnatural about this image. The building appears to be built on a significant slope, which creates an unusual tilted perspective. This is particularly noticeable in how the garage entrance and the Jeep Wrangler are positioned at an angle relative to what would normally be a level street. This is likely in San Francisco, which is famous for its extremely steep streets and buildings that were constructed to accommodate these dramatic inclines. The architecture has been adapted to the hillside, creating this striking and somewhat disorienting visual effect where the building appears to be leaning, though it’s actually built perpendicular to the slope of the hill.”, type=‘text’)], model=‘claude-3-5-sonnet-20241022’, role=‘assistant’, stop_reason=‘end_turn’, stop_sequence=None, type=‘message’, usage=Usage(cache_creation_input_tokens=0, cache_read_input_tokens=0, input_tokens=929, output_tokens=139))"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html",
    "href": "posts/008_semanticSearch2/Untitled1.html",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "KNN is a simple but powerful algorithm that: 1. Stores training data 2. Finds the K closest points to a test sample 3. Assigns the most common label among those neighbors\n\n\n\nThis class: - Stores training data (X_train, y_train) - Uses Euclidean distance to find nearest neighbors - Returns the most common label among them italicized text\n🚀 Part 1: KNN Classifier Playground Goal: Build your own KNN classifier and see decision boundaries evolve!\n🧩 Step 1: Implement Simple KNN Help Professor AI finish the KNN class!\n\n\n\n\n\n\nSet the number of neighbors (k) with default value 3\n\n\n\n\n\nStore the training data points (X_train)\nStore the corresponding labels (y_train)\n\n\n\n\n\nInitialize empty list for predictions\nFor each test point:\n\nCalculate Euclidean distance to all training points\n\nSubtract test point from all training points\nSquare the differences\nSum along axis 1\nTake square root of sum\n\nFind indices of k nearest neighbors\n\nUse argpartition function to get k smallest distances\n\nGet labels of k nearest neighbors\nPerform majority voting\n\nUse Counter to count label occurrences\nFind most common label\n\nAppend most common label to predictions\n\nReturn predictions as a numpy array\n\n\n\n\n\n\nnumpy.sqrt(): Calculate square root\nnumpy.sum(): Sum array elements\nnumpy.argpartition(): Partially sort array to find k smallest elements\nCounter(): Count occurrences of elements in a list\nmost_common(): Get most common element(s) from Counter object/\n\n\n\n\n\nWe load the digits dataset, scale, and use PCA to reduce the features to 2 dimensions. - This helps us plot decision boundaries for each digit (0-9). - We then draw lines/regions indicating which digit the KNN would classify a point as.\n📊 Visualizing KNN on MNIST Digits Goal: Explore how KNN performs on PCA-reduced MNIST digits!\n(Example implementation based on your KNN implementation)\n     \n\n\n\nUsing Gaussian blobs, we generate random clusters to mimic real data. - Perfect for visualizing how KNN forms boundaries. - Perfect to test overfitting (small K) vs. underfitting (large K).\n\n\n\n\nDefine function create_realistic_data():\n\nSet cluster properties (position, number of samples, standard deviation)\nFor each cluster:\n\nGenerate x and y values using normal distribution\nCombine x and y values into 2D points\nAssign cluster ID to each point\n\nCombine all cluster data\nReturn features (X) and labels (y)\n\nCall create_realistic_data() to generate X and y\n\n\n\n\n\nDefine function plot_knn_boundary(knn, X, y, title):\n\nCreate a figure\nGenerate a mesh grid for the plot area\nPredict classes for each point in the mesh grid\nCreate a custom colormap\nPlot decision regions using contourf\nPlot original data points with scatter\nAdd title, labels, and colorbar\nDisplay the plot\n\nDefine function plot_accuracy_curve(X, y, max_k):\n\nSplit data into training and testing sets\nFor k from 1 to max_k:\n\nCreate and train KNN model\nMake predictions on test set\nCalculate and store accuracy\n\nPlot k values vs accuracies\nAdd title, labels, and grid\nDisplay the plot\n\n\n         \n\n\n\n\nWe create a wiki client to talk to Wikipedia.\nWe retrieve the page content of each article.\nThen we embed that text with get_embedding.\n\n🌌 Wikipedia Semantic Explorer Mission: Become an AI librarian finding related articles!\n🔑 API Setup Unlock the knowledge vaults\nLet’s set up the OpenAI API and Wikipedia client.\n\n\n\n\n\nConnects to Wikipedia using wiki.page.\nChecks if the page exists.\nReturns the page’s text for embedding or analysis.\n\n📚 Fetch Wikipedia Articles Implement a function to fetch article content.\n\n\n\n\nInitialize Wikipedia API with user agent\nDefine list of article titles to fetch\n\n\n\n\n\n\n\nFetch Wikipedia page for given title\nIf page exists, return page text\nOtherwise, return None\n\n\n\n\n\nTruncate text to 8000 characters\nCount tokens in truncated text\nUpdate total token count for cost tracking\nGenerate embedding using OpenAI API\nReturn embedding vector\n\n\n\n\n\nInitialize empty lists for embeddings and labels\nFor each article title:\n\nFetch article text\nIf text is retrieved:\n\nGenerate embedding\nAdd embedding to embeddings list\nAdd title to labels list\nPrint success message\n\nIf fetch fails, print failure message\n\n\n\n\n\n\n\n\n\nStore embeddings as numpy array\nNormalize embeddings\nStore labels\n\n\n\n\n\nGenerate embedding for input text\nNormalize query embedding\nCalculate similarities using dot product\nFind indices of top k similar articles\nReturn list of (label, similarity) pairs for top matches\n\n\n\n\n\n\nInitialize KNN with generated embeddings and labels\n(Ready for querying with new text inputs)\n\n \n\n\n\n\nHolds embeddings and article labels/titles.\nOn query, it:\n\nEmbeds your query text.\nComputes cosine similarity with all stored article embeddings.\nSorts by similarity and returns the top matches.\n\n\n📚 Build the KNN Class\nImplement a KNN class to find similar articles.\n\n\n\n\n\nDefine query text: “Neural networks in machine learning”\nUse KNN to find top 3 similar articles:\n\nCall knn.query() with query text and k=3\nStore results\n\nPrint “Top Matches:”\nFor each result (title and score):\n\nPrint title and formatted score\n\n\n\n\n\n\nDefine two article titles:\n\narticle1 = “Artificial Intelligence”\narticle2 = “Quantum Computing”\n\nFor each article:\n\nFetch article text using get_article_text()\nGenerate embedding using get_embedding()\n\nCalculate similarity:\n\nNormalize both embeddings\nCompute dot product of normalized embeddings\n\nPrint similarity score between the two articles\n\n\n📚 Plot Similarity Heatmap\nVisualize the similarity matrix.\n\n\n\n\nCalculate dot product of embeddings with their transpose: similarity_matrix = dot_product(embeddings, transpose(embeddings))\n\n\n\n\n\nCreate a new figure with size 10x8\nGenerate heatmap:\n\nUse imshow() to display similarity matrix\nSet colormap to “viridis”\n\nSet x-axis labels:\n\nUse article titles as labels\nSet tick positions to range from 0 to number of articles\nRotate labels 90 degrees\n\nSet y-axis labels:\n\nUse article titles as labels\nSet tick positions to range from 0 to number of articles\n\nAdd colorbar:\n\nLabel it “Cosine Similarity”\n\nSet title of the plot to “Wikipedia Article Similarities”\nDisplay the plot"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#building-a-simple-knn-class",
    "href": "posts/008_semanticSearch2/Untitled1.html#building-a-simple-knn-class",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "This class: - Stores training data (X_train, y_train) - Uses Euclidean distance to find nearest neighbors - Returns the most common label among them italicized text\n🚀 Part 1: KNN Classifier Playground Goal: Build your own KNN classifier and see decision boundaries evolve!\n🧩 Step 1: Implement Simple KNN Help Professor AI finish the KNN class!"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#knn-algorithm",
    "href": "posts/008_semanticSearch2/Untitled1.html#knn-algorithm",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Set the number of neighbors (k) with default value 3\n\n\n\n\n\nStore the training data points (X_train)\nStore the corresponding labels (y_train)\n\n\n\n\n\nInitialize empty list for predictions\nFor each test point:\n\nCalculate Euclidean distance to all training points\n\nSubtract test point from all training points\nSquare the differences\nSum along axis 1\nTake square root of sum\n\nFind indices of k nearest neighbors\n\nUse argpartition function to get k smallest distances\n\nGet labels of k nearest neighbors\nPerform majority voting\n\nUse Counter to count label occurrences\nFind most common label\n\nAppend most common label to predictions\n\nReturn predictions as a numpy array"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#helper-functions",
    "href": "posts/008_semanticSearch2/Untitled1.html#helper-functions",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "numpy.sqrt(): Calculate square root\nnumpy.sum(): Sum array elements\nnumpy.argpartition(): Partially sort array to find k smallest elements\nCounter(): Count occurrences of elements in a list\nmost_common(): Get most common element(s) from Counter object/"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#mnist-data-knn-boundaries",
    "href": "posts/008_semanticSearch2/Untitled1.html#mnist-data-knn-boundaries",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "We load the digits dataset, scale, and use PCA to reduce the features to 2 dimensions. - This helps us plot decision boundaries for each digit (0-9). - We then draw lines/regions indicating which digit the KNN would classify a point as.\n📊 Visualizing KNN on MNIST Digits Goal: Explore how KNN performs on PCA-reduced MNIST digits!\n(Example implementation based on your KNN implementation)"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#custom-synthetic-data",
    "href": "posts/008_semanticSearch2/Untitled1.html#custom-synthetic-data",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Using Gaussian blobs, we generate random clusters to mimic real data. - Perfect for visualizing how KNN forms boundaries. - Perfect to test overfitting (small K) vs. underfitting (large K)."
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#data-generation-and-preprocessing",
    "href": "posts/008_semanticSearch2/Untitled1.html#data-generation-and-preprocessing",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Define function create_realistic_data():\n\nSet cluster properties (position, number of samples, standard deviation)\nFor each cluster:\n\nGenerate x and y values using normal distribution\nCombine x and y values into 2D points\nAssign cluster ID to each point\n\nCombine all cluster data\nReturn features (X) and labels (y)\n\nCall create_realistic_data() to generate X and y"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#visualization-functions",
    "href": "posts/008_semanticSearch2/Untitled1.html#visualization-functions",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Define function plot_knn_boundary(knn, X, y, title):\n\nCreate a figure\nGenerate a mesh grid for the plot area\nPredict classes for each point in the mesh grid\nCreate a custom colormap\nPlot decision regions using contourf\nPlot original data points with scatter\nAdd title, labels, and colorbar\nDisplay the plot\n\nDefine function plot_accuracy_curve(X, y, max_k):\n\nSplit data into training and testing sets\nFor k from 1 to max_k:\n\nCreate and train KNN model\nMake predictions on test set\nCalculate and store accuracy\n\nPlot k values vs accuracies\nAdd title, labels, and grid\nDisplay the plot"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#wikipedia-openai-setup",
    "href": "posts/008_semanticSearch2/Untitled1.html#wikipedia-openai-setup",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "We create a wiki client to talk to Wikipedia.\nWe retrieve the page content of each article.\nThen we embed that text with get_embedding.\n\n🌌 Wikipedia Semantic Explorer Mission: Become an AI librarian finding related articles!\n🔑 API Setup Unlock the knowledge vaults\nLet’s set up the OpenAI API and Wikipedia client."
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#get_article_text-function",
    "href": "posts/008_semanticSearch2/Untitled1.html#get_article_text-function",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Connects to Wikipedia using wiki.page.\nChecks if the page exists.\nReturns the page’s text for embedding or analysis.\n\n📚 Fetch Wikipedia Articles Implement a function to fetch article content."
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#setup-and-initialization",
    "href": "posts/008_semanticSearch2/Untitled1.html#setup-and-initialization",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Initialize Wikipedia API with user agent\nDefine list of article titles to fetch"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#article-fetching-and-embedding",
    "href": "posts/008_semanticSearch2/Untitled1.html#article-fetching-and-embedding",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Fetch Wikipedia page for given title\nIf page exists, return page text\nOtherwise, return None\n\n\n\n\n\nTruncate text to 8000 characters\nCount tokens in truncated text\nUpdate total token count for cost tracking\nGenerate embedding using OpenAI API\nReturn embedding vector\n\n\n\n\n\nInitialize empty lists for embeddings and labels\nFor each article title:\n\nFetch article text\nIf text is retrieved:\n\nGenerate embedding\nAdd embedding to embeddings list\nAdd title to labels list\nPrint success message\n\nIf fetch fails, print failure message"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#knn-implementation",
    "href": "posts/008_semanticSearch2/Untitled1.html#knn-implementation",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Store embeddings as numpy array\nNormalize embeddings\nStore labels\n\n\n\n\n\nGenerate embedding for input text\nNormalize query embedding\nCalculate similarities using dot product\nFind indices of top k similar articles\nReturn list of (label, similarity) pairs for top matches"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#knn-usage",
    "href": "posts/008_semanticSearch2/Untitled1.html#knn-usage",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Initialize KNN with generated embeddings and labels\n(Ready for querying with new text inputs)"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#knn-class-for-wikipedia-articles",
    "href": "posts/008_semanticSearch2/Untitled1.html#knn-class-for-wikipedia-articles",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Holds embeddings and article labels/titles.\nOn query, it:\n\nEmbeds your query text.\nComputes cosine similarity with all stored article embeddings.\nSorts by similarity and returns the top matches.\n\n\n📚 Build the KNN Class\nImplement a KNN class to find similar articles."
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#example-1-finding-similar-articles",
    "href": "posts/008_semanticSearch2/Untitled1.html#example-1-finding-similar-articles",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Define query text: “Neural networks in machine learning”\nUse KNN to find top 3 similar articles:\n\nCall knn.query() with query text and k=3\nStore results\n\nPrint “Top Matches:”\nFor each result (title and score):\n\nPrint title and formatted score"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#example-2-comparing-two-specific-articles",
    "href": "posts/008_semanticSearch2/Untitled1.html#example-2-comparing-two-specific-articles",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Define two article titles:\n\narticle1 = “Artificial Intelligence”\narticle2 = “Quantum Computing”\n\nFor each article:\n\nFetch article text using get_article_text()\nGenerate embedding using get_embedding()\n\nCalculate similarity:\n\nNormalize both embeddings\nCompute dot product of normalized embeddings\n\nPrint similarity score between the two articles\n\n\n📚 Plot Similarity Heatmap\nVisualize the similarity matrix."
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#create-similarity-matrix",
    "href": "posts/008_semanticSearch2/Untitled1.html#create-similarity-matrix",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Calculate dot product of embeddings with their transpose: similarity_matrix = dot_product(embeddings, transpose(embeddings))"
  },
  {
    "objectID": "posts/008_semanticSearch2/Untitled1.html#visualize-similarity-matrix-as-heatmap",
    "href": "posts/008_semanticSearch2/Untitled1.html#visualize-similarity-matrix-as-heatmap",
    "title": "Part 2: Learning about embeddings Similarity",
    "section": "",
    "text": "Create a new figure with size 10x8\nGenerate heatmap:\n\nUse imshow() to display similarity matrix\nSet colormap to “viridis”\n\nSet x-axis labels:\n\nUse article titles as labels\nSet tick positions to range from 0 to number of articles\nRotate labels 90 degrees\n\nSet y-axis labels:\n\nUse article titles as labels\nSet tick positions to range from 0 to number of articles\n\nAdd colorbar:\n\nLabel it “Cosine Similarity”\n\nSet title of the plot to “Wikipedia Article Similarities”\nDisplay the plot"
  }
]